trigger:
- master
- develop

variables:
  sdk_version: 3.0.100-preview5-011568
  dockerRepositoryRoot: sannel
  dockerRepositoryName: mqtt.openfaas.trigger
  dockerTagBase: $(Build.SourceBranchName)-$(Build.BuildId)
  imageName: $(dockerRepositoryRoot)/$(dockerRepositoryName):$(dockerTagBase)
  projectFolder: MQTT.OpenFaas.Trigger
  mainProjectPath: src/$(projectFolder)/$(projectFolder).csproj
  mainConfigPath: src/$(projectFolder)/app_config
  tag: 3.0
  codeName: buster
  hasClient: false
  hasTests: false
  disableLinux: false
  disableWindows: false
  disableOSX: false

name: $(date:yyyy.MM.dd)$(rev:.rr)

jobs:
- job: 'osx'
  pool:
    vmImage: macOS-10.13
  condition: ne(variables['disableOSX'], 'true')
  steps:
  - task: DotNetCoreInstaller@0
    displayName: 'Use .NET Core sdk $(sdk_version)'
    inputs:
      version: $(sdk_version)
  - task: DotNetCoreCLI@2
    displayName: 'dotnet restore'
    inputs:
      command: custom
      projects: src/**/*.csproj
      custom: restore
      arguments: '-r osx-x64 --configfile .nuget/nuget.config'
      feedsToUse: config
      nugetConfigPath: .nuget/nuget.config
      externalFeedCredentials: 'Sannel House MyGet'
  - task: DotNetCoreCLI@2
    displayName: 'dotnet build Release'
    inputs:
      projects: $(mainProjectPath)
      arguments: '-r osx-x64 -c Release'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  - task: DotNetCoreCLI@2
    displayName: 'dotnet build Debug'
    inputs:
      projects: $(mainProjectPath)
      arguments: '-r osx-x64 -c Debug'
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
  - task: DotNetCoreCLI@2
    displayName: 'dotnet publish'
    inputs:
      command: publish
      publishWebProjects: false
      projects: $(mainProjectPath)
      arguments: '-r osx-x64 -o $(Build.StagingDirectory)'
      zipAfterPublish: false
  - task: DotNetCoreCLI@2
    displayName: 'dotnet clean'
    inputs:
      command: custom
      projects: '**/*.csproj'
      custom: clean
  - task: DotNetCoreCLI@2
    displayName: 'dotnet restore'
    inputs:
      command: custom
      projects: '**/*Tests.csproj'
      custom: restore
      arguments: '-r osx-x64 --configfile .nuget/nuget.config'
      feedsToUse: config
      nugetConfigPath: .nuget/nuget.config
      externalFeedCredentials: 'Sannel House MyGet'
    condition: eq(variables['hasTests'], 'true')
  - task: DotNetCoreCLI@2
    displayName: 'dotnet test'
    inputs:
      projects: '**/*Tests.csproj'
      command: test
      arguments: '--collect "Code coverage"'
      publishTestResults: true
    condition: eq(variables['hasTests'], 'true')
  - task: CopyFiles@2
    displayName: 'Copy Files to: $(Build.StagingDirectory)/$(projectFolder)/app_config/'
    inputs:
      SourceFolder: '$(mainConfigPath)'
      Contents: |
        **/*.json
        **/*.yml
        **/*.pfx
        **/*.crt
      TargetFolder: '$(Build.StagingDirectory)/$(projectFolder)/app_config/'
  - powershell: |
      New-Item -Type Directory -Force $(Build.StagingDirectory)/$(projectFolder)/app_data/
      New-Item -Type File -Force $(Build.StagingDirectory)/$(projectFolder)/app_data/.hold
    displayName: 'Prepare Items'
  - task: PublishPipelineArtifact@0
    displayName: 'Publish Pipeline Artifact'
    inputs:
      artifactName: 'osx-x64'
      targetPath: '$(Build.StagingDirectory)'

- job: client
  pool:
    vmImage: ubuntu-16.04
  condition: eq(variables['hasClient'], 'true')
  steps:
    - task: DotNetCoreInstaller@0
      displayName: 'Use .NET Core sdk $(sdk_version)'
      inputs:
        version: $(sdk_version)
    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: custom
        projects: src/$(projectFolder).Client/$(projectFolder).Client.csproj
        custom: restore
        arguments: '--configfile .nuget/nuget.config'
        feedsToUse: config
        nugetConfigPath: .nuget/nuget.config
        externalFeedCredentials: 'Sannel House MyGet'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet build Release'
      inputs:
        projects: src/$(projectFolder).Client/$(projectFolder).Client.csproj
        arguments: '-c Release'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

    - task: DotNetCoreCLI@2
      displayName: 'dotnet build Debug'
      inputs:
        projects: src/$(projectFolder).Client/$(projectFolder).Client.csproj
        arguments: '-c Debug'
      condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))

    - task: DotNetCoreCLI@2
      displayName: 'dotnet pack Release'
      inputs:
        command: 'pack'
        feedsToUse: 'select'
        packagesToPack: 'src/$(projectFolder).Client/$(projectFolder).Client.csproj'
        configuration: 'Release'
        versioningScheme: 'off'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    - task: DotNetCoreCLI@2
      displayName: 'dotnet pack Debug'
      inputs:
        command: 'pack'
        feedsToUse: 'select'
        packagesToPack: 'src/$(projectFolder).Client/$(projectFolder).Client.csproj'
        configuration: 'Debug'
        versioningScheme: 'off'
      condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
    - task: PublishPipelineArtifact@0
      displayName: 'Publish Pipeline Artifact'
      inputs:
        artifactName: 'client-nuget'
        targetPath: '$(Build.StagingDirectory)'

- job: linux_arm
  pool:
    vmImage: ubuntu-16.04
  condition: ne(variables['disableLinux'], 'true')
  steps:
    - powershell: |
        # Write your commands here
        sudo apt-get update
        sudo apt-get install -y qemu qemu-user-static qemu-user binfmt-support
        Copy-Item -Verbose /usr/bin/qemu-arm-static $(Build.StagingDirectory)
        # Use the environment variables input below to pass secret variables to this script
      displayName: 'Install qemu'
    - task: DotNetCoreInstaller@0
      displayName: 'Use .NET Core sdk 2.2'
      inputs:
        version: $(sdk_version)
    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: custom
        projects: $(mainProjectPath)
        custom: restore
        arguments: '-r linux-arm --configfile .nuget/nuget.config'
        feedsToUse: config
        nugetConfigPath: .nuget/nuget.config
        externalFeedCredentials: 'Sannel House MyGet'
    - task: DotNetCoreCLI@2
      displayName: 'dotnet build Release'
      inputs:
        projects: $(mainProjectPath)
        arguments: '-r linux-arm -c Release'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    - task: DotNetCoreCLI@2
      displayName: 'dotnet build Debug'
      inputs:
        projects: $(mainProjectPath)
        arguments: '-r linux-arm -c Debug'
      condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
    - task: DotNetCoreCLI@2
      displayName: 'dotnet publish'
      inputs:
        command: publish
        publishWebProjects: false
        projects: $(mainProjectPath)
        arguments: '-r linux-arm -o $(Build.StagingDirectory)'
        zipAfterPublish: false
    - task: CopyFiles@2
      displayName: 'Copy Files to: $(Build.StagingDirectory)/$(projectFolder)/app_config/'
      inputs:
        SourceFolder: '$(mainConfigPath)'
        Contents: |
          **/*.json
          **/*.yml
          **/*.pfx
          **/*.crt
        TargetFolder: '$(Build.StagingDirectory)/$(projectFolder)/app_config/'
    - powershell: |
        New-Item -Type Directory -Force $(Build.StagingDirectory)/$(projectFolder)/app_data/
        New-Item -Type File -Force $(Build.StagingDirectory)/$(projectFolder)/app_data/.hold
        
        copy-item -Force -Verbose build/linux-arm/Dockerfile $(Build.StagingDirectory)/
      displayName: 'Prepare Items'
    - task: Docker@1
      displayName: 'Run an image '
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'Docker Hub'
        command: 'Run an image'
        arguments: '--rm --privileged'
        imageName: ' multiarch/qemu-user-static:register'
        containerCommand: '--reset'
    - task: Docker@0
      displayName: 'Build an image arm'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryConnection: 'Docker Hub'
        dockerFile: '$(Build.StagingDirectory)/Dockerfile'
        buildArguments: 'tag=$(tag)-$(codeName)-slim-arm32v7'
        defaultContext: false
        context: '$(Build.StagingDirectory)'
        imageName: '$(imageName)-linux-arm32v7'
    - powershell: |
        $img = "$(imageName)".ToLower()
        docker save -o $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).linux.arm32v7.tar "${img}-linux-arm32v7"
        bzip2 -9 $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).linux.arm32v7.tar
      displayName: 'export image'
#    - task: Docker@1
#      displayName: 'Push an image'
#      inputs:
#        containerregistrytype: 'Container Registry'
#        dockerRegistryEndpoint: 'Docker Hub'
#        command: 'Push an image'
#        imageName: '$(imageName)-linux-arm32v7'
    - powershell: |
        # Write your powershell commands here.
        
        Remove-Item -Force $(Build.StagingDirectory)/Dockerfile*
        Remove-Item -Force $(Build.StagingDirectory)/qemu*
        
        # Use the environment variables input below to pass secret variables to this script.
      displayName: 'clean up copy'
    - task: PublishPipelineArtifact@0
      displayName: 'Publish Pipeline Artifact'
      inputs:
        artifactName: 'linux-arm'
        targetPath: '$(Build.StagingDirectory)'

- job: linux_arm64
  pool:
    vmImage: ubuntu-16.04
  condition: ne(variables['disableLinux'], 'true')
  steps:
    - powershell: |
        # Write your commands here
        sudo apt-get update
        sudo apt-get install -y qemu qemu-user-static qemu-user binfmt-support
        Copy-Item -Verbose /usr/bin/qemu-aarch64-static $(Build.StagingDirectory)
        # Use the environment variables input below to pass secret variables to this script
      displayName: 'Install qemu'
    - task: DotNetCoreInstaller@0
      displayName: 'Use .NET Core sdk $(sdk_version)'
      inputs:
        version: $(sdk_version)
    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: custom
        projects: $(mainProjectPath)
        custom: restore
        arguments: '-r linux-arm64 --configfile .nuget/nuget.config'
        feedsToUse: config
        nugetConfigPath: .nuget/nuget.config
        externalFeedCredentials: 'Sannel House MyGet'
    - task: DotNetCoreCLI@2
      displayName: 'dotnet build Release'
      inputs:
        projects: $(mainProjectPath)
        arguments: '-r linux-arm64 -c Release'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    - task: DotNetCoreCLI@2
      displayName: 'dotnet build Debug'
      inputs:
        projects: $(mainProjectPath)
        arguments: '-r linux-arm64 -c Debug'
      condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
    - task: DotNetCoreCLI@2
      displayName: 'dotnet publish'
      inputs:
        command: publish
        publishWebProjects: false
        projects: $(mainProjectPath)
        arguments: '-r linux-arm64 -o $(Build.StagingDirectory)'
        zipAfterPublish: false
    - task: CopyFiles@2
      displayName: 'Copy Files to: $(Build.StagingDirectory)/$(projectFolder)/app_config/'
      inputs:
        SourceFolder: '$(mainConfigPath)'
        Contents: |
          **/*.json
          **/*.yml
          **/*.pfx
          **/*.crt
        TargetFolder: '$(Build.StagingDirectory)/$(projectFolder)/app_config/'
    - powershell: |
        New-Item -Type Directory -Force $(Build.StagingDirectory)/$(projectFolder)/app_data/
        New-Item -Type File -Force $(Build.StagingDirectory)/$(projectFolder)/app_data/.hold
        
        copy-item -Force -Verbose build/linux-arm64/Dockerfile $(Build.StagingDirectory)/
      displayName: 'Prepare Items'
    - task: Docker@1
      displayName: 'Run an image '
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'Docker Hub'
        command: 'Run an image'
        arguments: '--rm --privileged'
        imageName: ' multiarch/qemu-user-static:register'
        containerCommand: '--reset'
    - task: Docker@0
      displayName: 'Build an image arm'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryConnection: 'Docker Hub'
        dockerFile: '$(Build.StagingDirectory)/Dockerfile'
        buildArguments: 'tag=$(tag)-$(codeName)-slim-arm64v8'
        defaultContext: false
        context: '$(Build.StagingDirectory)'
        imageName: '$(imageName)-linux-arm64v8'
    - powershell: |
        $img = "$(imageName)".ToLower()
        docker save -o $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).linux.arm64v8.tar "${img}-linux-arm64v8"
        bzip2 -9 $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).linux.arm64v8.tar
      displayName: 'export image'
#    - task: Docker@1
#      displayName: 'Push an image'
#      inputs:
#        containerregistrytype: 'Container Registry'
#        dockerRegistryEndpoint: 'Docker Hub'
#        command: 'Push an image'
#        imageName: '$(imageName)-linux-arm32v7'
    - powershell: |
        # Write your powershell commands here.
        
        Remove-Item -Force $(Build.StagingDirectory)/Dockerfile*
        Remove-Item -Force $(Build.StagingDirectory)/qemu*
        
        # Use the environment variables input below to pass secret variables to this script.
      displayName: 'clean up copy'
    - task: PublishPipelineArtifact@0
      displayName: 'Publish Pipeline Artifact'
      inputs:
        artifactName: 'linux-arm64'
        targetPath: '$(Build.StagingDirectory)'

- job: linux_x64
  pool:
    vmImage: ubuntu-16.04
  condition: ne(variables['disableLinux'], 'true')
  steps:
    - task: DotNetCoreInstaller@0
      displayName: 'Use .NET Core sdk $(sdk_version)'
      inputs:
        version: $(sdk_version)
    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: custom
        projects: $(mainProjectPath)
        custom: restore
        arguments: '-r linux-x64 --configfile .nuget/nuget.config'
        feedsToUse: config
        nugetConfigPath: .nuget/nuget.config
        externalFeedCredentials: 'Sannel House MyGet'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet build Release'
      inputs:
        projects: $(mainProjectPath)
        arguments: '-r linux-x64 -c Release'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

    - task: DotNetCoreCLI@2
      displayName: 'dotnet build Debug'
      inputs:
        projects: $(mainProjectPath)
        arguments: '-r linux-x64 -c Debug'
      condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))

    - task: DotNetCoreCLI@2
      displayName: 'dotnet publish'
      inputs:
        command: publish
        publishWebProjects: false
        projects: $(mainProjectPath)
        arguments: '-r linux-x64 -o $(Build.StagingDirectory)'
        zipAfterPublish: false

    - task: DotNetCoreCLI@2
      displayName: 'dotnet clean'
      inputs:
        command: custom
        projects: '**/*.csproj'
        custom: clean
    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: custom
        projects: '**/*Tests.csproj'
        custom: restore
        arguments: '-r linux-x64 --configfile .nuget/nuget.config'
        feedsToUse: config
        nugetConfigPath: .nuget/nuget.config
        externalFeedCredentials: 'Sannel House MyGet'
      condition: eq(variables['hasTests'], 'true')
    - task: DotNetCoreCLI@2
      displayName: 'dotnet test'
      inputs:
        projects: '**/*Tests.csproj'
        command: test
        arguments: '--collect "Code coverage"'
        publishTestResults: true
      condition: eq(variables['hasTests'], 'true')
    - task: CopyFiles@2
      displayName: 'Copy Files to: $(Build.StagingDirectory)/$(projectFolder)/app_config/'
      inputs:
        SourceFolder: '$(mainConfigPath)'
        Contents: |
          **/*.json
          **/*.yml
          **/*.pfx
          **/*.crt
        TargetFolder: '$(Build.StagingDirectory)/$(projectFolder)/app_config/'

    - powershell: |
        New-Item -Type Directory -Force $(Build.StagingDirectory)/$(projectFolder)/app_data/
        New-Item -Type File -Force $(Build.StagingDirectory)/$(projectFolder)/app_data/.hold
        
        copy-item -Force -Verbose build/linux-x64/Dockerfile $(Build.StagingDirectory)/
      displayName: 'Prepare Items'

    - task: Docker@0
      displayName: 'Build an image x64'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryConnection: 'Docker Hub'
        dockerFile: '$(Build.StagingDirectory)/Dockerfile'
        buildArguments: 'tag=$(tag)'
        defaultContext: false
        context: '$(Build.StagingDirectory)'
        imageName: '$(imageName)-linux-x64'
    - powershell: |
        $img = "$(imageName)".ToLower()
        docker save -o $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).linux.x64.tar "${img}-linux-x64"
        bzip2 -9 $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).linux.x64.tar
      displayName: 'export image'
#    - task: Docker@1
#      displayName: 'Push an image'
#      inputs:
#        containerregistrytype: 'Container Registry'
#        dockerRegistryEndpoint: 'Docker Hub'
#        command: 'Push an image'
#        imageName: '$(imageName)-linux-x64'
#      condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/develop')))

    - powershell: |
        # Write your powershell commands here.
        
        Remove-Item -Force $(Build.StagingDirectory)/Dockerfile*
        
        # Use the environment variables input below to pass secret variables to this script.
      displayName: 'clean up'

    - task: PublishPipelineArtifact@0
      displayName: 'Publish Pipeline Artifact'
      inputs:
        artifactName: 'linux-x64'
        targetPath: '$(Build.StagingDirectory)'

- job: windows_x64
  pool:
    vmImage: windows-2019
  condition: ne(variables['disableWindows'], 'true')
  steps:
    - task: DotNetCoreInstaller@0
      displayName: 'Use .NET Core sdk $(sdk_version)'
      inputs:
        version: $(sdk_version)
    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: custom
        projects: $(mainProjectPath)
        custom: restore
        arguments: '-r win-x64 --configfile .nuget/nuget.config'
        feedsToUse: config
        nugetConfigPath: .nuget/nuget.config
        externalFeedCredentials: 'Sannel House MyGet'
    - task: DotNetCoreCLI@2
      displayName: 'dotnet build Release'
      inputs:
        projects: $(mainProjectPath)
        arguments: '-r win-x64 -c Release'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    - task: DotNetCoreCLI@2
      displayName: 'dotnet build Debug'
      inputs:
        projects: $(mainProjectPath)
        arguments: '-r win-x64 -c Debug'
      condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
    - task: DotNetCoreCLI@2
      displayName: 'dotnet publish'
      inputs:
        command: publish
        publishWebProjects: false
        projects: $(mainProjectPath)
        arguments: '-r win-x64 -o $(Build.StagingDirectory)'
        zipAfterPublish: false
    - task: DotNetCoreCLI@2
      displayName: 'dotnet clean'
      inputs:
        command: custom
        projects: '**/*.csproj'
        custom: clean
    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: custom
        projects: '**/*Tests.csproj'
        custom: restore
        arguments: '-r win-x64 --configfile .nuget/nuget.config'
        feedsToUse: config
        nugetConfigPath: .nuget/nuget.config
        externalFeedCredentials: 'Sannel House MyGet'
      condition: eq(variables['hasTests'], 'true')
    - task: DotNetCoreCLI@2
      displayName: 'dotnet test'
      inputs:
        projects: '**/*Tests.csproj'
        command: test
        arguments: '--collect "Code coverage"'
        publishTestResults: true
      condition: eq(variables['hasTests'], 'true')
    - task: CopyFiles@2
      displayName: 'Copy Files to: $(Build.StagingDirectory)/$(projectFolder)/app_config/'
      inputs:
        SourceFolder: '$(mainConfigPath)'
        Contents: |
          **/*.json
          **/*.yml
          **/*.pfx
          **/*.crt
        TargetFolder: '$(Build.StagingDirectory)/$(projectFolder)/app_config/'
    - powershell: |
        New-Item -Type Directory -Force $(Build.StagingDirectory)/$(projectFolder)/app_data/
        New-Item -Type File -Force $(Build.StagingDirectory)/$(projectFolder)/app_data/.hold
        
        copy-item -Force -Verbose build/windows/Dockerfile $(Build.StagingDirectory)/
      displayName: 'Prepare Items'
#    - task: Docker@0
#      displayName: 'Build an image x64 1903'
#      inputs:
#        containerregistrytype: 'Container Registry'
#        dockerRegistryConnection: 'Docker Hub'
#        action: 'Run a Docker command'
#        customCommand: 'build --build-arg tag=2.2-nanoserver-1903 -t $(imageName)-win-x64-1903 --isolation hyperv $(Build.StagingDirectory)'
    - task: Docker@0
      displayName: 'Build an image x64 1809'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryConnection: 'Docker Hub'
        action: 'Run a Docker command'
        customCommand: 'build --build-arg tag=$(tag)-nanoserver-1809 -t $(imageName)-win-x64-1809 --isolation hyperv $(Build.StagingDirectory)'
    - task: Docker@0
      displayName: 'Build an image x64 1803'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryConnection: 'Docker Hub'
        action: 'Run a Docker command'
        customCommand: 'build --build-arg tag=$(tag)-nanoserver-1803 -t $(imageName)-win-x64-1803 --isolation hyperv $(Build.StagingDirectory)'
    - powershell: |
        docker save -o $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).win.x64.1803.tar $(imageName)-win-x64-1803
        docker save -o $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).win.x64.1809.tar $(imageName)-win-x64-1809
        Compress-Archive $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).win.x64.1803.tar -DestinationPath $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).win.x64.1803.tar.zip
        Compress-Archive $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).win.x64.1809.tar -DestinationPath $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).win.x64.1809.tar.zip
        Remove-Item $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).win.x64.1803.tar 
        Remove-Item $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).win.x64.1809.tar 
      displayName: 'export images'

#    - powershell: |
#        docker save -o $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).$(dockerTagBase).win.x64.1903.tar $(imageName)-win-x64-1903
#        Compress-Archive $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).$(dockerTagBase).win.x64.1903.tar -DestinationPath $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).$(dockerTagBase).win.x64.1903.tar.zip
#        Remove-Item $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).$(dockerTagBase).win.x64.1903.tar 
#      displayName: 'export 1903'

#    - task: Docker@0 #1709 is no longer supported by dotnet core images
#      displayName: 'Build an image x64 1709'
#      inputs:
#        containerregistrytype: 'Container Registry'
#        dockerRegistryConnection: 'Docker Hub'
#        dockerFile: '$(Build.StagingDirectory)/Dockerfile'
#        buildArguments: 'tag=2.2-nanoserver-1709'
#        defaultContext: false
#        context: '$(Build.StagingDirectory)'
#        imageName: '$(imageName)-win-x64-1709'
#    - task: Docker@1
#      displayName: 'Push an image 1903'
#      inputs:
#        containerregistrytype: 'Container Registry'
#        dockerRegistryEndpoint: 'Docker Hub'
#        command: 'Push an image'
#        imageName: '$(imageName)-win-x64-1903'
#      condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/develop')))
#    - task: Docker@1
#      displayName: 'Push an image 1809'
#      inputs:
#        containerregistrytype: 'Container Registry'
#        dockerRegistryEndpoint: 'Docker Hub'
#        command: 'Push an image'
#        imageName: '$(imageName)-win-x64-1809'
#      condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/develop')))
#    - task: Docker@1
#      displayName: 'Push an image 1803'
#      inputs:
#        containerregistrytype: 'Container Registry'
#        dockerRegistryEndpoint: 'Docker Hub'
#        command: 'Push an image'
#        imageName: '$(imageName)-win-x64-1803'
#      condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/develop')))
#    - task: Docker@1
#      displayName: 'Push an image 1709'
#      inputs:
#        containerregistrytype: 'Container Registry'
#        dockerRegistryEndpoint: 'Docker Hub'
#        command: 'Push an image'
#        imageName: '$(imageName)-win-x64-1709'
#      condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/develop')))
    - powershell: |
        # Write your powershell commands here.
        
        Remove-Item -Force $(Build.StagingDirectory)/Dockerfile*
        
        # Use the environment variables input below to pass secret variables to this script.
      displayName: 'clean up'
    - task: PublishPipelineArtifact@0
      displayName: 'Publish Pipeline Artifact'
      inputs:
        artifactName: 'win-x64'
        targetPath: '$(Build.StagingDirectory)'

- job: windows_arm
  pool:
    vmImage: windows-2019
  condition: ne(variables['disableWindows'], 'true')
  steps:
    - task: DotNetCoreInstaller@0
      displayName: 'Use .NET Core sdk $(sdk_version)'
      inputs:
        version: $(sdk_version)
    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: custom
        projects: $(mainProjectPath)
        custom: restore
        arguments: '-r win-arm --configfile .nuget/nuget.config'
        feedsToUse: config
        nugetConfigPath: .nuget/nuget.config
        externalFeedCredentials: 'Sannel House MyGet'
    - task: DotNetCoreCLI@2
      displayName: 'dotnet build Release'
      inputs:
        projects: $(mainProjectPath)
        arguments: '-r win-arm -c Release'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    - task: DotNetCoreCLI@2
      displayName: 'dotnet build Debug'
      inputs:
        projects: $(mainProjectPath)
        arguments: '-r win-arm -c Debug'
      condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
    - task: DotNetCoreCLI@2
      displayName: 'dotnet publish'
      inputs:
        command: publish
        publishWebProjects: false
        projects: $(mainProjectPath)
        arguments: '-r win-arm -o $(Build.StagingDirectory)'
        zipAfterPublish: false
    - task: CopyFiles@2
      displayName: 'Copy Files to: $(Build.StagingDirectory)/$(projectFolder)/app_config/'
      inputs:
        SourceFolder: '$(mainConfigPath)'
        Contents: |
          **/*.json
          **/*.yml
          **/*.pfx
          **/*.crt
        TargetFolder: '$(Build.StagingDirectory)/$(projectFolder)/app_config/'
    - powershell: |
        New-Item -Type Directory -Force $(Build.StagingDirectory)/$(projectFolder)/app_data/
        New-Item -Type File -Force $(Build.StagingDirectory)/$(projectFolder)/app_data/.hold
        
        copy-item -Force -Verbose build/windows/Dockerfile $(Build.StagingDirectory)/
      displayName: 'Prepare Items'
    - task: Docker@0
      displayName: 'Build an image arm 1809'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryConnection: 'Docker Hub'
        action: 'Run a Docker command'
        customCommand: 'build --build-arg tag=$(tag)-nanoserver-1809-arm32v7 -t $(imageName)-win-arm-1809 --isolation hyperv $(Build.StagingDirectory)'
#    - task: Docker@0
#      displayName: 'Build an image arm 1903'
#      inputs:
#        containerregistrytype: 'Container Registry'
#        dockerRegistryConnection: 'Docker Hub'
#        action: 'Run a Docker command'
#        customCommand: 'build --build-arg tag=2.2-nanoserver-1903-arm32v7 -t $(imageName)-win-arm-1903 --isolation hyperv $(Build.StagingDirectory)'
    - powershell: |
        docker save -o $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).win.arm.1809.tar $(imageName)-win-arm-1809
        Compress-Archive $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).win.arm.1809.tar -DestinationPath $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).win.arm.1809.tar.zip
        Remove-Item $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).win.arm.1809.tar 
      displayName: 'export images'
#    - task: Docker@1
#      displayName: 'Push an image 1809'
#      inputs:
#        containerregistrytype: 'Container Registry'
#        dockerRegistryEndpoint: 'Docker Hub'
#        command: 'Push an image'
#        imageName: '$(imageName)-win-arm-1809'
#      condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/develop')))
#    - task: Docker@1
#      displayName: 'Push an image 1903'
#      inputs:
#        containerregistrytype: 'Container Registry'
#        dockerRegistryEndpoint: 'Docker Hub'
#        command: 'Push an image'
#        imageName: '$(imageName)-win-arm-1903'
#      condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/develop')))
    - powershell: |
        # Write your powershell commands here.
        
        Remove-Item -Force $(Build.StagingDirectory)/Dockerfile*
        
        # Use the environment variables input below to pass secret variables to this script.
      displayName: 'clean up'
    - task: PublishPipelineArtifact@0
      displayName: 'Publish Pipeline Artifact'
      inputs:
        artifactName: 'win-arm'
        targetPath: '$(Build.StagingDirectory)'


